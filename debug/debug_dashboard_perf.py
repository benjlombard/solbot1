#!/usr/bin/env python3
"""
üîç Script de debug pour diagnostiquer les √©carts entre dashboard et base de donn√©es
"""

import sqlite3
import time
from datetime import datetime, timedelta
from collections import defaultdict
import json

def debug_dashboard_metrics(database_path="../tokens.db"):
    """Analyser les √©carts entre dashboard et r√©alit√©"""
    
    print("üîç DIAGNOSTIC DES M√âTRIQUES DASHBOARD")
    print("="*60)
    
    conn = sqlite3.connect(database_path)
    cursor = conn.cursor()
    
    # 1. V√©rifier l'heure syst√®me vs base de donn√©es
    cursor.execute("SELECT datetime('now', 'localtime') as db_time")
    db_time = cursor.fetchone()[0]
    system_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    print(f"‚è∞ Heure syst√®me     : {system_time}")
    print(f"‚è∞ Heure base donn√©e : {db_time}")
    print()
    
    # 2. Analyser les updates r√©centes avec diff√©rentes fen√™tres
    time_windows = [
        ("5 minutes", "'-5 minutes'"),
        ("10 minutes", "'-10 minutes'"),
        ("1 heure", "'-1 hour'"),
        ("24 heures", "'-24 hours'")
    ]
    
    print("üìä ANALYSE DES UPDATES PAR FEN√äTRE TEMPORELLE:")
    for window_name, sql_interval in time_windows:
        # Tokens avec updated_at r√©cent
        cursor.execute(f"""
            SELECT COUNT(*) FROM tokens 
            WHERE updated_at > datetime('now', {sql_interval}, 'localtime')
            AND updated_at IS NOT NULL
        """)
        count_updated = cursor.fetchone()[0]
        
        # Tokens avec first_discovered_at r√©cent (nouveaux)
        cursor.execute(f"""
            SELECT COUNT(*) FROM tokens 
            WHERE first_discovered_at > datetime('now', {sql_interval}, 'localtime')
        """)
        count_discovered = cursor.fetchone()[0]
        
        # Tokens enrichis r√©cemment
        cursor.execute(f"""
            SELECT COUNT(*) FROM tokens 
            WHERE updated_at > datetime('now', {sql_interval}, 'localtime')
            AND symbol IS NOT NULL 
            AND symbol != 'UNKNOWN' 
            AND symbol != ''
        """)
        count_enriched = cursor.fetchone()[0]
        
        print(f"   {window_name:<12}: {count_updated:>3} mis √† jour | {count_discovered:>3} d√©couverts | {count_enriched:>3} enrichis")
    
    print()
    
    # 3. D√©tail des 20 derni√®res updates
    print("üìã D√âTAIL DES 20 DERNI√àRES MISES √Ä JOUR:")
    cursor.execute("""
        SELECT symbol, updated_at, first_discovered_at,
               CASE 
                   WHEN updated_at IS NOT NULL 
                   THEN round((julianday('now', 'localtime') - julianday(updated_at)) * 24 * 60, 1)
                   ELSE NULL 
               END as minutes_ago_updated,
               CASE 
                   WHEN first_discovered_at IS NOT NULL 
                   THEN round((julianday('now', 'localtime') - julianday(first_discovered_at)) * 24 * 60, 1)
                   ELSE NULL 
               END as minutes_ago_discovered
        FROM tokens 
        WHERE updated_at IS NOT NULL
        ORDER BY updated_at DESC 
        LIMIT 20
    """)
    
    results = cursor.fetchall()
    print("   Symbol       | Updated (min ago) | Discovered (min ago) | Updated At")
    print("   " + "-"*75)
    
    recent_5min = 0
    for row in results:
        symbol, updated_at, discovered_at, min_ago_upd, min_ago_disc = row
        symbol = symbol or "UNKNOWN"
        
        if min_ago_upd and min_ago_upd <= 5:
            recent_5min += 1
            indicator = "üî•"
        elif min_ago_upd and min_ago_upd <= 10:
            indicator = "‚ö°"
        else:
            indicator = "  "
        
        print(f"   {indicator} {symbol:<10} | {min_ago_upd or 'N/A':>13} | {min_ago_disc or 'N/A':>16} | {updated_at}")
    
    print(f"\n‚úÖ Tokens r√©ellement mis √† jour dans les 5 derni√®res minutes: {recent_5min}")
    print()
    
    # 4. V√©rifier les doublons potentiels
    print("üîç V√âRIFICATION DES DOUBLONS:")
    cursor.execute("""
        SELECT symbol, COUNT(*) as count 
        FROM tokens 
        WHERE symbol IS NOT NULL AND symbol != 'UNKNOWN' AND symbol != ''
        GROUP BY symbol 
        HAVING COUNT(*) > 1 
        ORDER BY count DESC 
        LIMIT 10
    """)
    
    duplicates = cursor.fetchall()
    if duplicates:
        print("   Tokens dupliqu√©s d√©tect√©s:")
        for symbol, count in duplicates:
            print(f"   - {symbol}: {count} occurrences")
    else:
        print("   ‚úÖ Pas de doublons d√©tect√©s")
    
    print()
    
    # 5. Analyser la coh√©rence updated_at vs first_discovered_at
    print("üîç COH√âRENCE DES TIMESTAMPS:")
    cursor.execute("""
        SELECT COUNT(*) FROM tokens 
        WHERE updated_at IS NOT NULL 
        AND first_discovered_at IS NOT NULL
        AND updated_at < first_discovered_at
    """)
    inconsistent = cursor.fetchone()[0]
    
    if inconsistent > 0:
        print(f"   ‚ö†Ô∏è  {inconsistent} tokens avec updated_at < first_discovered_at")
    else:
        print("   ‚úÖ Timestamps coh√©rents")
    
    # 6. V√©rifier les NULL values
    cursor.execute("SELECT COUNT(*) FROM tokens WHERE updated_at IS NULL")
    null_updated = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM tokens WHERE first_discovered_at IS NULL")
    null_discovered = cursor.fetchone()[0]
    
    print(f"   Tokens sans updated_at: {null_updated}")
    print(f"   Tokens sans first_discovered_at: {null_discovered}")
    print()
    
    # 7. Simuler le calcul du dashboard
    print("üßÆ SIMULATION DU CALCUL DASHBOARD:")
    
    # Si le dashboard utilise une fen√™tre glissante de 5 minutes
    now = time.time()
    five_minutes_ago = now - (5 * 60)
    
    print(f"   Timestamp actuel: {now}")
    print(f"   Il y a 5 min: {five_minutes_ago}")
    print(f"   Date actuelle: {datetime.fromtimestamp(now)}")
    print(f"   Date -5min: {datetime.fromtimestamp(five_minutes_ago)}")
    
    # V√©rifier si le dashboard pourrait compter autrement
    cursor.execute("""
        SELECT updated_at FROM tokens 
        WHERE updated_at IS NOT NULL
        ORDER BY updated_at DESC 
        LIMIT 200
    """)
    
    all_updates = [row[0] for row in cursor.fetchall()]
    
    # Convertir en timestamps et compter dans diff√©rentes fen√™tres
    dashboard_counts = {}
    
    for window_minutes in [5, 10, 15, 30]:
        cutoff = datetime.now() - timedelta(minutes=window_minutes)
        cutoff_str = cutoff.strftime('%Y-%m-%d %H:%M:%S')
        
        count = sum(1 for update_str in all_updates if update_str >= cutoff_str)
        dashboard_counts[f"{window_minutes}min"] = count
    
    print(f"\nüìä COMPTAGES SIMUL√âS DASHBOARD:")
    for window, count in dashboard_counts.items():
        print(f"   Derni√®res {window}: {count} tokens")
    
    conn.close()
    
    # 8. Recommandations
    print("\nüí° RECOMMANDATIONS:")
    
    if recent_5min != 150:  # Si √©cart important
        print("   üîß Actions sugg√©r√©es:")
        print("   1. V√©rifier la logique de fen√™tre temporelle dans performance_monitor.py")
        print("   2. S'assurer que le dashboard utilise la m√™me timezone que la DB")
        print("   3. V√©rifier si le compteur inclut les tentatives vs les succ√®s")
        print("   4. Ajouter des logs d√©taill√©s dans record_token_update()")
        
        if recent_5min < 150:
            print("   ‚ö†Ô∏è  Le dashboard semble surestimer le nombre d'updates")
        else:
            print("   ‚ö†Ô∏è  Le dashboard pourrait sous-estimer le nombre d'updates")
    else:
        print("   ‚úÖ Les m√©triques semblent coh√©rentes")
    
    print("\n" + "="*60)
    
    return {
        "real_5min_updates": recent_5min,
        "dashboard_claim": 150,  # Valeur vue dans le dashboard
        "discrepancy": abs(recent_5min - 150),
        "simulated_counts": dashboard_counts
    }

def check_performance_monitor_logic():
    """V√©rifier la logique du performance monitor"""
    
    print("\nüîç V√âRIFICATION DE LA LOGIQUE PERFORMANCE MONITOR")
    print("="*60)
    
    try:
        from performance_monitor import performance_monitor
        
        # V√©rifier les donn√©es en m√©moire
        with performance_monitor.lock:
            current_time = time.time()
            window_start = current_time - performance_monitor.window_seconds
            
            recent_updates = [t for t in performance_monitor.update_timestamps if t >= window_start]
            
            print(f"‚è∞ Fen√™tre du monitor: {performance_monitor.window_seconds} secondes")
            print(f"‚è∞ Timestamp actuel: {current_time}")
            print(f"‚è∞ D√©but fen√™tre: {window_start}")
            print(f"üìä Updates en m√©moire (fen√™tre): {len(recent_updates)}")
            print(f"üìä Total updates en m√©moire: {len(performance_monitor.update_timestamps)}")
            print(f"üìä Total updates compteur: {performance_monitor.total_updates}")
            
            # Afficher les derniers timestamps
            if performance_monitor.update_timestamps:
                print(f"\nüìã Derniers timestamps d'updates:")
                for i, ts in enumerate(list(performance_monitor.update_timestamps)[-10:]):
                    ago = (current_time - ts) / 60
                    dt = datetime.fromtimestamp(ts)
                    print(f"   {i+1:2}. {dt} (il y a {ago:.1f}min)")
        
        return True
        
    except ImportError:
        print("‚ùå Module performance_monitor non trouv√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

if __name__ == "__main__":
    # Lancer le diagnostic complet
    result = debug_dashboard_metrics()
    
    # V√©rifier la logique du monitor
    check_performance_monitor_logic()
    
    print(f"\nüéØ R√âSUM√â:")
    print(f"   Dashboard affiche: 150 tokens mis √† jour (5min)")
    print(f"   Base de donn√©es: {result['real_5min_updates']} tokens mis √† jour (5min)")
    print(f"   √âcart: {result['discrepancy']} tokens")
    
    if result['discrepancy'] > 10:
        print(f"   ‚ö†Ô∏è  √âcart significatif d√©tect√©!")
        print(f"   üîß Correction n√©cessaire dans le code du dashboard")
    else:
        print(f"   ‚úÖ √âcart acceptable")