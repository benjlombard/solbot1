#!/usr/bin/env python3
"""
Script de migration de base de donn√©es pour le moniteur Solana optimis√©
Corrige les incompatibilit√©s de sch√©ma entre l'ancienne et la nouvelle version
"""

import sqlite3
import os
import time
from datetime import datetime

def backup_database(db_name: str) -> str:
    """Cr√©e une sauvegarde de la base de donn√©es actuelle"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_name = f"{db_name}.backup_{timestamp}"
    
    try:
        # Copier le fichier de base de donn√©es
        import shutil
        shutil.copy2(db_name, backup_name)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la sauvegarde: {e}")
        return None

def check_database_schema(db_name: str):
    """V√©rifie et affiche le sch√©ma actuel de la base de donn√©es"""
    try:
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        print(f"üîç V√©rification du sch√©ma de {db_name}...")
        
        # Lister toutes les tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        print(f"üìä Tables trouv√©es: {tables}")
        
        # V√©rifier le sch√©ma de chaque table importante
        for table in ['transactions', 'wallet_stats', 'token_accounts', 'scan_history']:
            if table in tables:
                cursor.execute(f"PRAGMA table_info({table})")
                columns = cursor.fetchall()
                print(f"\nüìã Table '{table}':")
                for col in columns:
                    print(f"   - {col[1]} ({col[2]})")
            else:
                print(f"\n‚ùå Table '{table}' non trouv√©e")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

def migrate_wallet_stats_table(db_name: str):
    """Migre la table wallet_stats pour ajouter la colonne wallet_address"""
    try:
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        print("üîß Migration de la table wallet_stats...")
        
        # V√©rifier si la colonne wallet_address existe d√©j√†
        cursor.execute("PRAGMA table_info(wallet_stats)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'wallet_address' not in columns:
            print("   ‚ûï Ajout de la colonne wallet_address...")
            
            # Cr√©er une nouvelle table avec le bon sch√©ma
            cursor.execute('''
                CREATE TABLE wallet_stats_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    wallet_address TEXT,
                    balance_sol REAL,
                    total_transactions INTEGER,
                    total_volume REAL,
                    pnl REAL,
                    largest_transaction REAL,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Copier les donn√©es existantes (si il y en a)
            cursor.execute("SELECT COUNT(*) FROM wallet_stats")
            count = cursor.fetchone()[0]
            
            if count > 0:
                print(f"   üìã Migration de {count} enregistrements existants...")
                # Assumer un wallet par d√©faut pour les anciennes donn√©es
                default_wallet = "UNKNOWN_WALLET"
                cursor.execute('''
                    INSERT INTO wallet_stats_new 
                    (wallet_address, balance_sol, total_transactions, total_volume, pnl, largest_transaction, updated_at)
                    SELECT ?, balance_sol, total_transactions, total_volume, pnl, largest_transaction, updated_at
                    FROM wallet_stats
                ''', (default_wallet,))
            
            # Supprimer l'ancienne table et renommer la nouvelle
            cursor.execute("DROP TABLE wallet_stats")
            cursor.execute("ALTER TABLE wallet_stats_new RENAME TO wallet_stats")
            
            print("   ‚úÖ Table wallet_stats migr√©e avec succ√®s")
        else:
            print("   ‚úÖ Colonne wallet_address d√©j√† pr√©sente")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration wallet_stats: {e}")
        raise

def ensure_all_tables_exist(db_name: str):
    """S'assure que toutes les tables n√©cessaires existent avec le bon sch√©ma"""
    try:
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        print("üîß V√©rification/cr√©ation de toutes les tables...")
        
        # Table des transactions (mise √† jour si n√©cessaire)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                signature TEXT UNIQUE NOT NULL,
                wallet_address TEXT,
                slot INTEGER,
                block_time INTEGER,
                amount REAL,
                token_mint TEXT,
                token_symbol TEXT,
                token_name TEXT,
                transaction_type TEXT,
                token_amount REAL,
                price_per_token REAL,
                fee REAL,
                status TEXT,
                is_token_transaction BOOLEAN DEFAULT 0,
                is_large_token_amount BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Table des tokens
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tokens (
                address TEXT PRIMARY KEY,
                symbol TEXT,
                name TEXT,
                decimals INTEGER,
                price_usd REAL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Table des comptes de tokens (nouvelle)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS token_accounts (
                wallet_address TEXT,
                ata_pubkey TEXT,
                token_mint TEXT,
                balance REAL,
                decimals INTEGER DEFAULT 9,
                first_seen INTEGER,
                last_updated INTEGER,
                last_scanned INTEGER,
                is_active BOOLEAN DEFAULT 1,
                scan_priority INTEGER DEFAULT 1,
                PRIMARY KEY (wallet_address, ata_pubkey)
            )
        ''')
        
        # Table de l'historique des scans (nouvelle)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scan_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                wallet_address TEXT,
                scan_type TEXT,
                total_accounts INTEGER,
                new_accounts INTEGER,
                scan_duration REAL,
                completed_at INTEGER,
                notes TEXT
            )
        ''')
        
        # Cr√©er les index
        indexes = [
            ("idx_token_accounts_wallet", "CREATE INDEX IF NOT EXISTS idx_token_accounts_wallet ON token_accounts(wallet_address)"),
            ("idx_token_accounts_mint", "CREATE INDEX IF NOT EXISTS idx_token_accounts_mint ON token_accounts(token_mint)"),
            ("idx_token_accounts_priority", "CREATE INDEX IF NOT EXISTS idx_token_accounts_priority ON token_accounts(scan_priority DESC, last_scanned ASC)"),
            ("idx_transactions_wallet_time", "CREATE INDEX IF NOT EXISTS idx_transactions_wallet_time ON transactions(wallet_address, block_time DESC)"),
            ("idx_transactions_token_type", "CREATE INDEX IF NOT EXISTS idx_transactions_token_type ON transactions(is_token_transaction, block_time DESC)")
        ]
        
        for index_name, index_sql in indexes:
            try:
                cursor.execute(index_sql)
                print(f"   ‚úÖ Index '{index_name}' cr√©√©")
            except sqlite3.OperationalError:
                print(f"   ‚úÖ Index '{index_name}' existe d√©j√†")
        
        conn.commit()
        conn.close()
        print("‚úÖ Toutes les tables et index sont pr√™ts")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        raise

def add_missing_columns_to_transactions(db_name: str):
    """Ajoute les colonnes manquantes √† la table transactions"""
    try:
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        print("üîß V√©rification des colonnes de la table transactions...")
        
        # V√©rifier les colonnes existantes
        cursor.execute("PRAGMA table_info(transactions)")
        existing_columns = [col[1] for col in cursor.fetchall()]
        
        # Colonnes requises
        required_columns = [
            ('wallet_address', 'TEXT'),
            ('token_mint', 'TEXT'),
            ('token_symbol', 'TEXT'),
            ('token_name', 'TEXT'),
            ('transaction_type', 'TEXT'),
            ('token_amount', 'REAL'),
            ('price_per_token', 'REAL'),
            ('is_token_transaction', 'BOOLEAN DEFAULT 0'),
            ('is_large_token_amount', 'BOOLEAN DEFAULT 0')
        ]
        
        for column_name, column_type in required_columns:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f'ALTER TABLE transactions ADD COLUMN {column_name} {column_type}')
                    print(f"   ‚ûï Colonne '{column_name}' ajout√©e")
                except sqlite3.OperationalError as e:
                    print(f"   ‚ö†Ô∏è Impossible d'ajouter '{column_name}': {e}")
        
        conn.commit()
        conn.close()
        print("‚úÖ Table transactions mise √† jour")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour des colonnes: {e}")

def main():
    """Point d'entr√©e principal de la migration"""
    db_name = "solana_wallet.db"
    
    print("üöÄ MIGRATION DE BASE DE DONN√âES - MONITEUR SOLANA OPTIMIS√â")
    print("=" * 70)
    
    # V√©rifier si la base existe
    if not os.path.exists(db_name):
        print(f"‚úÖ Aucune base existante trouv√©e. Cr√©ation d'une nouvelle base...")
        # Cr√©er directement avec le bon sch√©ma
        ensure_all_tables_exist(db_name)
        print("‚úÖ Migration termin√©e - nouvelle base de donn√©es cr√©√©e")
        return
    
    print(f"üìã Base de donn√©es existante trouv√©e: {db_name}")
    
    # Cr√©er une sauvegarde
    backup_name = backup_database(db_name)
    
    # V√©rifier le sch√©ma actuel
    check_database_schema(db_name)
    
    print("\nüîß D√âBUT DE LA MIGRATION...")
    
    try:
        # √âtape 1: Migrer la table wallet_stats
        migrate_wallet_stats_table(db_name)
        
        # √âtape 2: Ajouter les colonnes manquantes √† transactions
        add_missing_columns_to_transactions(db_name)
        
        # √âtape 3: S'assurer que toutes les nouvelles tables existent
        ensure_all_tables_exist(db_name)
        
        print("\n‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS!")
        print("=" * 70)
        print("üéâ La base de donn√©es est maintenant compatible avec le moniteur optimis√©")
        
        if backup_name:
            print(f"üíæ Sauvegarde disponible: {backup_name}")
        
        print("\nüöÄ Vous pouvez maintenant relancer le moniteur!")
        
    except Exception as e:
        print(f"\n‚ùå √âCHEC DE LA MIGRATION: {e}")
        print("=" * 70)
        
        if backup_name:
            print(f"üíæ Restaurez la sauvegarde si n√©cessaire: {backup_name}")
        
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)