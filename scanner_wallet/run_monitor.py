#!/usr/bin/env python3
"""
Script de d√©marrage optimis√© pour le moniteur Solana avec Ankr
"""

import os
import sys
import logging
from dotenv import load_dotenv

def setup_environment():
    """Configure l'environnement et les variables"""
    # Charger le fichier .env si pr√©sent
    if os.path.exists('.env'):
        load_dotenv('.env')
        print("‚úÖ Fichier .env charg√©")
    else:
        print("‚ÑπÔ∏è Aucun fichier .env trouv√©, utilisation des variables par d√©faut")
    
    # V√©rifier les d√©pendances
    try:
        import requests
        import flask
        import flask_cors
        print("‚úÖ Toutes les d√©pendances sont install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Ex√©cutez: pip install -r requirements.txt")
        sys.exit(1)

def check_configuration():
    """V√©rifie la configuration"""
    try:
        from config import DefaultConfig as Config
        
        # V√©rification manuelle au lieu d'utiliser validate_config()
        errors = []
        
        if not Config.WALLET_ADDRESS or len(Config.WALLET_ADDRESS) < 40:
            errors.append("WALLET_ADDRESS invalide")
        
        if Config.UPDATE_INTERVAL < 30:
            errors.append("UPDATE_INTERVAL trop faible (minimum 30s recommand√©)")
        
        # V√©rifier les endpoints RPC
        try:
            endpoints = Config.get_rpc_endpoints()
            if not endpoints:
                errors.append("Aucun endpoint RPC configur√©")
        except Exception as e:
            errors.append(f"Erreur dans get_rpc_endpoints: {e}")
        
        if errors:
            raise ValueError(f"Erreurs de configuration: {', '.join(errors)}")
        
        print("‚úÖ Configuration valid√©e")
        
        # Afficher les param√®tres principaux
        print(f"üìç Wallet: {Config.WALLET_ADDRESS}")
        print(f"üîë QuickNode: {'Configur√©' if hasattr(Config, 'QUICKNODE_ENDPOINT') and Config.QUICKNODE_ENDPOINT else 'Non configur√©'}")
        print(f"‚è±Ô∏è Intervalle: {Config.UPDATE_INTERVAL}s")
        print(f"üéØ Limite transactions: {Config.DEFAULT_TRANSACTION_LIMIT}")
        
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        sys.exit(1)

def test_quicknode_connection():
    """Teste la connexion Ankr"""
    try:
        from config import DefaultConfig as Config
        import requests
        
        endpoint = Config.get_rpc_endpoints()[0]
        headers = Config.get_rpc_headers()
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "getHealth",
            "params": []
        }
        
        print("üß™ Test de connexion QuickNode...")
        response = requests.post(endpoint, json=payload, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Connexion QuickNode r√©ussie")
            return True
        else:
            print(f"‚ö†Ô∏è R√©ponse inattendue de QuickNode: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion QuickNode: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©marrage du Moniteur de Wallet Solana avec Ankr")
    print("=" * 55)
    
    # Configuration de l'environnement
    setup_environment()
    
    # V√©rification de la configuration
    check_configuration()
    
    # Test de connexion Ankr
    quicknode_ok = test_quicknode_connection()
    
    if not quicknode_ok:
        print("‚ö†Ô∏è Attention: Probl√®me avec QuickNode, utilisation des endpoints de fallback")
        response = input("Continuer quand m√™me? (o/N): ")
        if response.lower() not in ['o', 'oui', 'y', 'yes']:
            sys.exit(1)
    
    print("\nüéØ D√©marrage du moniteur...")
    print("=" * 55)
    
    # Importer et d√©marrer l'application
    try:
        # Importer l'application apr√®s la configuration
        from scanner_wallet import app, run_monitor  # Utiliser la version corrig√©e
        import threading
        
        # D√©marrer le monitoring en arri√®re-plan
        monitor_thread = threading.Thread(target=run_monitor, daemon=True)
        monitor_thread.start()
        print("‚úÖ Thread de monitoring d√©marr√©")
        
        # Configuration Flask
        from config import DefaultConfig as Config
        host = getattr(Config, 'FLASK_HOST', '127.0.0.1')
        port = getattr(Config, 'FLASK_PORT', 5000)
        debug = getattr(Config, 'FLASK_DEBUG', True)
        
        print(f"üåê Serveur web: http://{host}:{port}")
        print("üìä Dashboard accessible dans votre navigateur")
        print("\nüí° Conseils:")
        print("   - Ctrl+C pour arr√™ter le moniteur")
        print("   - Consultez wallet_monitor.log pour les d√©tails")
        print("   - Le monitoring se fait automatiquement en arri√®re-plan")
        print("\n" + "=" * 55)
        
        # D√©marrer le serveur Flask
        app.run(host=host, port=port, debug=debug)
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        print("üí° Essayez: python app.py")
        sys.exit(1)

if __name__ == "__main__":
    main()