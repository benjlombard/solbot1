#!/usr/bin/env python3
"""
üêã REAL Whale Detection Tester - VERSION CORRIG√âE
Teste si le syst√®me d√©tecte VRAIMENT les whales en temps r√©el
"""

import asyncio
import logging
import sqlite3
import time
from datetime import datetime, timedelta
from typing import Dict, List
import aiohttp
from solana.rpc.async_api import AsyncClient
from solders.signature import Signature

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('real_whale_test.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('real_whale_tester')

class RealWhaleDetectionTester:
    """Testeur de d√©tection whale R√âELLE - VERSION CORRIG√âE"""
    
    def __init__(self):
        self.database_path = "tokens.db"
        self.session = None
        self.client = None
        self.running = False
        
        # Compteurs
        self.stats = {
            'signatures_tested': 0,
            'real_whales_found': 0,
            'api_calls_made': 0,
            'parsing_errors': 0,
            'start_time': datetime.now()
        }
    
    async def start_real_testing(self):
        """D√©marrer le test de d√©tection R√âELLE"""
        logger.info("üöÄ === TEST D√âTECTION WHALE R√âELLE (VERSION CORRIG√âE) ===")
        logger.info("Ce script va tester si votre syst√®me d√©tecte de VRAIES whales")
        
        self.session = aiohttp.ClientSession()
        self.client = AsyncClient("https://rpc.helius.xyz/?api-key=872ddf73-4cfd-4263-a418-521bbde27eb8")
        self.running = True
        
        try:
            # Import du syst√®me whale
            from whale_detector_integration import (
                whale_detector, 
                start_whale_monitoring,
                process_websocket_logs_for_whales,
                WHALE_THRESHOLD_USD,
                CRITICAL_THRESHOLD_USD
            )
            
            logger.info(f"üí∞ Seuils configur√©s: Whale=${WHALE_THRESHOLD_USD} | Critique=${CRITICAL_THRESHOLD_USD}")
            
            # D√©marrer le syst√®me
            await start_whale_monitoring()
            logger.info("‚úÖ Syst√®me whale d√©marr√©")
            
            # Lancer les tests en parall√®le
            await asyncio.gather(
                self.test_recent_large_transactions(),
                self.monitor_database_changes(),
                self.display_real_stats()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur: {e}")
        finally:
            await self.cleanup()
    
    async def test_recent_large_transactions(self):
        """Tester avec de vraies signatures r√©centes - VERSION CORRIG√âE"""
        logger.info("üîç Test avec vraies signatures - VERSION CORRIG√âE...")
        
        # Vos signatures trouv√©es sur Solscan
        known_large_signatures = [
            '3bGKecHJKP13B47p1WHyVMuSqEJ3QCqBKkgnuX2oBQPXUiSJc2ibLbu9PSR6CUxoiQNDSHUTsBEHfwiCidai7xMj',
            # Ajoutez d'autres signatures ici
        ]
        
        if not known_large_signatures:
            logger.warning("‚ö†Ô∏è Pas de signatures test")
            return
        
        for signature in known_large_signatures:
            if not self.running:
                break
                
            try:
                logger.info(f"üß™ Test signature: {signature[:20]}...")
                
                # R√©cup√©rer la transaction r√©elle avec la bonne m√©thode
                sig = Signature.from_string(signature)
                tx = await self.client.get_transaction(
                    sig,
                    commitment="finalized",
                    max_supported_transaction_version=0
                )
                
                if tx.value:
                    # CORRECTION: Acc√®s correct aux logs selon la structure API
                    logs = []
                    
                    # M√©thode 1: Transaction standard
                    if hasattr(tx.value, 'transaction') and tx.value.transaction:
                        if hasattr(tx.value.transaction, 'meta') and tx.value.transaction.meta:
                            logs = tx.value.transaction.meta.log_messages or []
                        elif hasattr(tx.value, 'meta') and tx.value.meta:
                            logs = tx.value.meta.log_messages or []
                    
                    # M√©thode 2: Acc√®s direct aux meta
                    elif hasattr(tx.value, 'meta') and tx.value.meta:
                        logs = tx.value.meta.log_messages or []
                    
                    # M√©thode 3: V√©rifier les attributs disponibles
                    else:
                        logger.info(f"üîç Attributs disponibles: {dir(tx.value)}")
                        if hasattr(tx.value, 'log_messages'):
                            logs = tx.value.log_messages or []
                    
                    if logs:
                        logger.info(f"üìã {len(logs)} logs trouv√©s")
                        
                        # Afficher quelques logs pour debug
                        for i, log in enumerate(logs[:3]):
                            logger.info(f"   Log {i}: {log[:80]}...")
                        
                        # Compter les whales avant le test
                        whales_before = self.count_whale_transactions()
                        
                        # Traiter avec le syst√®me whale
                        from whale_detector_integration import process_websocket_logs_for_whales
                        await process_websocket_logs_for_whales(signature, logs)
                        
                        # V√©rifier si une whale a √©t√© d√©tect√©e
                        await asyncio.sleep(3)  # Laisser le temps au processing
                        whales_after = self.count_whale_transactions()
                        
                        if whales_after > whales_before:
                            logger.info(f"‚úÖ SUCC√àS: Whale d√©tect√©e pour {signature[:20]}...")
                            self.stats['real_whales_found'] += 1
                        else:
                            logger.info(f"‚ùå Aucune whale d√©tect√©e pour {signature[:20]}...")
                            
                            # Debug: v√©rifier pourquoi pas d√©tect√©e
                            await self.debug_why_not_detected(signature, logs)
                        
                        self.stats['signatures_tested'] += 1
                        
                    else:
                        logger.warning(f"‚ö†Ô∏è Aucun log trouv√© pour {signature[:20]}...")
                        # Debug: afficher la structure de la transaction
                        await self.debug_transaction_structure(tx.value)
                    
                else:
                    logger.warning(f"‚ö†Ô∏è Transaction non trouv√©e: {signature[:20]}...")
                
                await asyncio.sleep(5)  # √âviter le rate limiting
                
            except Exception as e:
                logger.error(f"‚ùå Erreur test signature {signature[:20]}...: {e}")
                self.stats['parsing_errors'] += 1
                
                # Debug l'erreur
                import traceback
                logger.debug(f"Stack trace: {traceback.format_exc()}")
    
    async def debug_transaction_structure(self, tx_value):
        """Debug: afficher la structure de la transaction"""
        logger.info("üîç DEBUG: Structure de la transaction:")
        logger.info(f"   Type: {type(tx_value)}")
        logger.info(f"   Attributs: {[attr for attr in dir(tx_value) if not attr.startswith('_')]}")
        
        if hasattr(tx_value, 'transaction'):
            logger.info(f"   transaction.type: {type(tx_value.transaction)}")
            if hasattr(tx_value.transaction, 'meta'):
                logger.info(f"   transaction.meta exists: {tx_value.transaction.meta is not None}")
        
        if hasattr(tx_value, 'meta'):
            logger.info(f"   meta exists: {tx_value.meta is not None}")
            if tx_value.meta:
                logger.info(f"   meta.type: {type(tx_value.meta)}")
                logger.info(f"   meta.attributes: {[attr for attr in dir(tx_value.meta) if not attr.startswith('_')]}")
    
    async def debug_why_not_detected(self, signature: str, logs: List[str]):
        """Debug: pourquoi la whale n'a pas √©t√© d√©tect√©e"""
        logger.info(f"üîç DEBUG: Analyse pourquoi {signature[:20]}... pas d√©tect√©e:")
        
        # V√©rifier les indicateurs de swap
        swap_indicators = []
        for log in logs:
            log_lower = log.lower()
            if any(keyword in log_lower for keyword in ['jupiter', 'swap', 'route', 'raydium', 'pump']):
                swap_indicators.append(log[:100])
        
        if swap_indicators:
            logger.info(f"   ‚úÖ Indicateurs swap trouv√©s: {len(swap_indicators)}")
            for indicator in swap_indicators[:3]:
                logger.info(f"      {indicator}")
        else:
            logger.warning(f"   ‚ùå Aucun indicateur de swap trouv√©")
            logger.info(f"   Premiers logs: {logs[:3]}")
        
        # V√©rifier les programmes impliqu√©s
        program_logs = [log for log in logs if 'Program' in log and 'invoke' in log]
        logger.info(f"   Programmes invoqu√©s: {len(program_logs)}")
        for prog_log in program_logs[:3]:
            logger.info(f"      {prog_log}")
    
    async def monitor_database_changes(self):
        """Surveiller les changements dans la base de donn√©es"""
        logger.info("üíæ Surveillance des changements base de donn√©es...")
        
        last_count = self.count_whale_transactions()
        logger.info(f"üìä Transactions whale initiales: {last_count}")
        
        while self.running:
            try:
                current_count = self.count_whale_transactions()
                
                if current_count > last_count:
                    new_whales = current_count - last_count
                    logger.info(f"üÜï {new_whales} nouvelle(s) transaction(s) whale d√©tect√©e(s)!")
                    
                    # R√©cup√©rer les d√©tails des nouvelles whales
                    new_whale_details = self.get_recent_whale_details(limit=new_whales)
                    
                    for whale in new_whale_details:
                        amount = whale.get('amount_usd', 0)
                        tx_type = whale.get('transaction_type', 'unknown')
                        dex = whale.get('dex_id', 'unknown')
                        timestamp = whale.get('timestamp', 'unknown')
                        
                        logger.info(f"üêã NOUVELLE WHALE: ${amount:,.0f} {tx_type} sur {dex} √† {timestamp}")
                    
                    last_count = current_count
                
                await asyncio.sleep(10)  # Check toutes les 10 secondes
                
            except Exception as e:
                logger.error(f"‚ùå Erreur monitoring DB: {e}")
                await asyncio.sleep(30)
    
    def count_whale_transactions(self) -> int:
        """Compter le nombre total de transactions whale"""
        conn = sqlite3.connect(self.database_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("SELECT COUNT(*) FROM whale_transactions_live")
            return cursor.fetchone()[0]
        except:
            return 0
        finally:
            conn.close()
    
    def get_recent_whale_details(self, limit: int = 5) -> List[Dict]:
        """R√©cup√©rer les d√©tails des whales r√©centes"""
        conn = sqlite3.connect(self.database_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT * FROM whale_transactions_live 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (limit,))
            
            columns = [desc[0] for desc in cursor.description]
            results = []
            
            for row in cursor.fetchall():
                results.append(dict(zip(columns, row)))
            
            return results
        except:
            return []
        finally:
            conn.close()
    
    async def display_real_stats(self):
        """Afficher les statistiques des tests r√©els"""
        while self.running:
            try:
                uptime = datetime.now() - self.stats['start_time']
                total_whales = self.count_whale_transactions()
                
                logger.info("üìä === STATS D√âTECTION R√âELLE ===")
                logger.info(f"   ‚è±Ô∏è  Uptime: {uptime}")
                logger.info(f"   üîç Signatures test√©es: {self.stats['signatures_tested']}")
                logger.info(f"   üêã Whales r√©elles trouv√©es: {self.stats['real_whales_found']}")
                logger.info(f"   üíæ Total whales en DB: {total_whales}")
                logger.info(f"   ‚ùå Erreurs parsing: {self.stats['parsing_errors']}")
                
                if self.stats['signatures_tested'] > 0:
                    success_rate = (self.stats['real_whales_found'] / self.stats['signatures_tested']) * 100
                    logger.info(f"   üìà Taux de succ√®s: {success_rate:.1f}%")
                
                logger.info("=" * 40)
                
                await asyncio.sleep(120)  # Stats toutes les 2 minutes
                
            except Exception as e:
                logger.error(f"‚ùå Erreur stats: {e}")
                await asyncio.sleep(180)
    
    async def cleanup(self):
        """Nettoyage des ressources"""
        self.running = False
        if self.session:
            await self.session.close()
        if self.client:
            await self.client.close()
        
        logger.info("üèÅ === R√âSULTATS FINAUX ===")
        logger.info(f"   üîç Signatures test√©es: {self.stats['signatures_tested']}")
        logger.info(f"   üêã Whales d√©tect√©es: {self.stats['real_whales_found']}")
        logger.info(f"   ‚ùå Erreurs: {self.stats['parsing_errors']}")
        
        if self.stats['signatures_tested'] > 0:
            success_rate = (self.stats['real_whales_found'] / self.stats['signatures_tested']) * 100
            logger.info(f"   üìà Taux de d√©tection: {success_rate:.1f}%")
        
        logger.info("‚úÖ Test termin√©!")

async def main():
    """Point d'entr√©e principal"""
    print("üêã === TESTEUR D√âTECTION WHALE R√âELLE (CORRIG√â) ===")
    print("Ce script teste si votre syst√®me d√©tecte de VRAIES whales")
    print("Ctrl+C pour arr√™ter\n")
    
    tester = RealWhaleDetectionTester()
    
    try:
        await tester.start_real_testing()
    except KeyboardInterrupt:
        logger.info("üëã Arr√™t demand√©")
        tester.running = False
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")

if __name__ == "__main__":
    asyncio.run(main())