#5 scripts à lancer
python optimized_launcher.py --batch-size 25 --max-concurrent 25 --enable-auto-scaling --enable-performance-profiling --whale-threshold 500
python dexscreener_enricher.py --interval 1 --batch-size 250 --strategy recent --min-hours 0 --verbose
#mode nuit (lent mais sûr) :
python rugcheck_update_script.py --batch-size 2 --delay 5.0 --requests-per-minute 15 --only-missing
#progressive update : 
python rugcheck_update_script.py --limit 500 --batch-size 5 --delay 2.5 --requests-per-minute 25 --only-missing
#complete update : 
python rugcheck_update_script.py --batch-size 5 --delay 2.0 --requests-per-minute 30 --only-missing

python pump_fun_checker.py --single-cycle --batch-size 200 --log-level DEBUG --status 'no_dex_data';

python system_health_monitor.py --continuous


Le token n'existe que sur la plateforme Pump.fun, où tous les achats/ventes se font contre une bonding curve système How to Create Memecoins on Pump.fun and Buy the PUMP Token | CoinGecko
DexScreener liste automatiquement les tokens dès qu'ils sont ajoutés à une pool de liquidité et ont au moins une transaction
Tant que le token est sur la bonding curve, il n'y a pas de pool de liquidité = pas de listing DexScreener

#git 
gitleaks detect --source . --config .gitleaks.toml --verbose --no-git --log-level debug --log-opts '-p'
git add . && git commit -m "add files" && git push origin main


#system_health_monitor : 
# Vérification unique
python system_health_monitor.py
# Monitoring continu (met à jour toutes les 60s)
python system_health_monitor.py --continuous
# Monitoring rapide (toutes les 30s)
python system_health_monitor.py --continuous --interval 30
# Afficher aussi les meilleurs tokens
python system_health_monitor.py --show-tokens
# Mode alertes uniquement (n'affiche que si problème)
python system_health_monitor.py --continuous --alerts-only
# Exporter les métriques en JSON
python system_health_monitor.py --export-json health_metrics.json


# Analyse simple de tous les tokens non-tradeable
python non_tradeable_analyzer.py

# Analyser seulement les 50 premiers
python non_tradeable_analyzer.py --limit 50

# Analyser seulement les tokens découverts dans les 24 dernières heures
python non_tradeable_analyzer.py --age-hours 24

# Mode dry-run : voir ce qui serait mis à jour sans modifier la DB
python non_tradeable_analyzer.py --dry-run

# Mettre à jour automatiquement les tokens qui devraient être tradeable
python non_tradeable_analyzer.py --update

# Exporter l'analyse en JSON
python non_tradeable_analyzer.py --export-json analysis.json

# Analyse rapide avec traitement par batch plus grand
python non_tradeable_analyzer.py --batch-size 10 --limit 100
























python main.py --test-solana
python main.py --wallet-info
python jupiter_db_scanner_k2_g2_c1.py --interval 1 --limit 15 --database tokens.db --early --social --holders-growth --update-interval 2
python jupiter_db_scanner_k2_g2_c1.py --interval 1 --limit 15 --database tokens.db --early --social --holders-growth --update-interval 2 --log-level INFO





# Tester l'analyse sur le token SOL wrappé
python main.py --test-rugcheck So11111111111111111111111111111111111111112

# Ou tester sur BONK (token populaire)
python main.py --test-rugcheck DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263
python main.py --test-dexscreener DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263

python main.py --trending-analysis

python main.py --test-run

python main.py --log-level DEBUG
python main.py --trending-analysis --continuous

timeout 1800 python main.py


get_trending_pairs et
get_newest_tokens_realtime

python main.py --newest-analysis


python main.py --newest-analysis 6 --log-level DEBUG

python main.py --newest-analysis 6

python main.py --test-endpoints

# Analyse continue (défaut 6h lookback, scan toutes les 10 minutes)
python main.py --continuous-newest

# Avec paramètres personnalisés
python main.py --continuous-newest 12 --scan-interval 1

# Analyse unique avec tous les résultats
python main.py --newest-analysis 6


# Méthode timestamp (par défaut)
python main.py --newest-analysis 6

# Méthode explicite
python main.py --newest-analysis 6 --method timestamp

# Mode continu avec méthode timestamp
python main.py --continuous-newest 6 --scan-interval 1 --method timestamp

# Comparer les méthodes
python main.py --newest-analysis 6 --method optimized
python main.py --newest-analysis 6 --method terms



########### SCANNER #####################
# Mode scanner seul (surveillance pure)
python main.py --scanner-mode

# Mode hybride (recommandé : scanner + cycles traditionnels)
python main.py --hybrid-mode

# Test du scanner
python main.py --test-scanner

# Statistiques
python main.py --scanner-stats


python main.py --quick-test

# Test complet mais patient (5 minutes)
python main.py --test-scanner

# Voir les stats sans lancer le scanner
python main.py --scanner-stats



# Scanner continu (toutes les 10min, 15 tokens max)
python utils/jupiter_api/jupiter_db_scanner.py --interval 10 --limit 15

# Scan unique pour test
python utils/jupiter_api/jupiter_db_scanner.py --single-scan --limit 10

# Voir les statistiques de la DB
python utils/jupiter_api/jupiter_db_scanner.py --stats

# Personnaliser la base de données
python utils/jupiter_api/jupiter_db_scanner.py --database my_tokens.db --interval 5 --limit 20

#birdeye
# Nouveaux tokens Birdeye (dernières 12 heures)
python main.py --birdeye-new 12

# Tokens trending Birdeye
python main.py --birdeye-trending 24h

# Multi-sources avec filtrage par âge
python main.py --multi-source birdeye dexscreener --max-age 6 --token-limit 20

# Analyse combinée trending + nouveaux
python main.py --multi-source trending_birdeye birdeye --max-age 24


python utils/jupiter_api/jupiter_db_scanner_1.py --single-scan --limit 5 --database tokens.db


